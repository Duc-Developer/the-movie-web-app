{"version":3,"sources":["../node_modules/@material-ui/core/esm/utils/useControlled.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isArray.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/filterOutFalsy.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/utils/isPrimitive.ts","../../src/logic/getFieldsValues.ts","../../src/utils/deepMerge.ts","../../src/utils/deepEqual.ts","../../src/logic/isErrorStateChanged.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getFieldArrayParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx","../../src/logic/getInputValue.ts","../../src/controller.tsx","../node_modules/@material-ui/icons/VpnKey.js","../node_modules/@material-ui/icons/Visibility.js","../node_modules/@material-ui/icons/VisibilityOff.js","../node_modules/@material-ui/core/esm/InputAdornment/InputAdornment.js"],"names":["useControlled","_ref","controlled","defaultProp","default","isControlled","name","state","React","undefined","current","_React$useState","valueState","setValue","newValue","_createForOfIteratorHelper","o","Symbol","iterator","Array","isArray","unsupportedIterableToArray","i","F","s","n","length","done","value","e","_e","f","TypeError","it","err","normalCompletion","didErr","step","next","_e2","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","isHTMLElement","addEventListener","isObjectType","isNullOrUndefined","Date","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","lastIndex","key","objValue","isObject","isNaN","data","Object","entries","reduce","previous","val","filter","Boolean","obj","defaultValue","filterOutFalsy","split","isUndefined","fields","fieldErrors","get","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","shallowFieldsStateRef","excludeDisabled","disabled","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","isCheckBoxInput","forEach","removeAllEventListeners","setFieldArrayDirtyFields","defaultValues","dirtyFields","parentName","search","output","isString","startsWith","find","deepMerge","target","source","isPrimitive","targetValue","sourceValue","deepEqual","object1","object2","isErrorObject","keys1","keys2","includes","val1","val2","isErrorStateChanged","errors","error","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","message","getValidateError","validateAllFieldCriteria","types","a","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","requiredValue","requiredMessage","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","exceedMin","valueDate","valueAsDate","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","validateError","validationResult","validateFunction","validateResult","getPath","pathWithIndex","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","mode","isOnSubmit","isWindowUndefined","isWeb","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","watchFieldsRef","Set","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","shouldRenderBaseOnError","shouldRender","shouldReRender","setFieldValue","rawValue","radioRef","selectRef","checkboxRef","isFormDirty","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","isFieldWatched","renderWatchedInputs","found","size","getFieldArrayParentName","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","skipValidation","validateResolver","removeFieldEventListener","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","watch","unregister","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","isSelectInput","register","refOrValidationOptions","rules","handleSubmit","onValid","onInvalid","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","disconnect","commonProps","control","prop","FormContext","React.createContext","displayName","React.useContext","as","render","onFocus","rest","methods","isNotFieldArray","getInitialValue","setInputStateValue","valueRef","onFocusRef","commonTask","event","getInputValue","registerField","defineProperty","onBlur","onChange","props","React.isValidElement","React.cloneElement","React.createElement","_interopRequireDefault","require","exports","_react","_default","createElement","d","InputAdornment","children","classes","className","_props$component","component","Component","_props$disablePointer","disablePointerEvents","_props$disableTypogra","disableTypography","position","variantProp","variant","other","_objectWithoutProperties","muiFormControl","useFormControl","FormControlContext","Provider","_extends","clsx","root","hiddenLabel","filled","positionStart","positionEnd","margin","marginDense","Typography","color","withStyles","display","height","maxHeight","alignItems","whiteSpace","marginTop","marginRight","marginLeft","pointerEvents"],"mappings":"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","file":"static/js/6.b46e1211.chunk.js","sourcesContent":["/* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */\nimport * as React from 'react';\nexport default function useControlled(_ref) {\n  var controlled = _ref.controlled,\n      defaultProp = _ref.default,\n      name = _ref.name,\n      _ref$state = _ref.state,\n      state = _ref$state === void 0 ? 'value' : _ref$state;\n\n  var _React$useRef = React.useRef(controlled !== undefined),\n      isControlled = _React$useRef.current;\n\n  var _React$useState = React.useState(defaultProp),\n      valueState = _React$useState[0],\n      setValue = _React$useState[1];\n\n  var value = isControlled ? controlled : valueState;\n\n  if (process.env.NODE_ENV !== 'production') {\n    React.useEffect(function () {\n      if (isControlled !== (controlled !== undefined)) {\n        console.error([\"Material-UI: A component is changing the \".concat(isControlled ? '' : 'un', \"controlled \").concat(state, \" state of \").concat(name, \" to be \").concat(isControlled ? 'un' : '', \"controlled.\"), 'Elements should not switch from uncontrolled to controlled (or vice versa).', \"Decide between using a controlled or uncontrolled \".concat(name, \" \") + 'element for the lifetime of the component.', \"The nature of the state is determined during the first render, it's considered controlled if the value is not `undefined`.\", 'More info: https://fb.me/react-controlled-components'].join('\\n'));\n      }\n    }, [controlled]);\n\n    var _React$useRef2 = React.useRef(defaultProp),\n        defaultValue = _React$useRef2.current;\n\n    React.useEffect(function () {\n      if (!isControlled && defaultValue !== defaultProp) {\n        console.error([\"Material-UI: A component is changing the default \".concat(state, \" state of an uncontrolled \").concat(name, \" after being initialized. \") + \"To suppress this warning opt to use a controlled \".concat(name, \".\")].join('\\n'));\n      }\n    }, [JSON.stringify(defaultProp)]);\n  }\n\n  var setValueIfUncontrolled = React.useCallback(function (newValue) {\n    if (!isControlled) {\n      setValue(newValue);\n    }\n  }, []);\n  return [value, setValueIfUncontrolled];\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): string[] => {\n  const result: string[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport filterOutFalsy from './filterOutFalsy';\n\nexport default (obj: any, path: string, defaultValue?: unknown) => {\n  const result = filterOutFalsy(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport filterOutFalsy from '../utils/filterOutFalsy';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      set(shallowFieldsStateRef.current, name, value);\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      filterOutFalsy(options).forEach((option, index): void => {\n        const { ref } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !filterOutFalsy(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import { get } from '../utils';\nimport isArray from '../utils/isArray';\nimport set from '../utils/set';\n\nexport default function setFieldArrayDirtyFields<\n  T extends U,\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setFieldArrayDirtyFields(\n          values[index][key],\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key]\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n    !dirtyFields.length &&\n      parentNode &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields.length ? dirtyFields : undefined;\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return deepMerge(\n    transformToNestObject({ ...((shallowFieldsStateRef || {}).current || {}) }),\n    transformToNestObject(output),\n  );\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      if (\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (isArray(targetValue) && isArray(sourceValue))\n      ) {\n        target[key] = deepMerge(targetValue, sourceValue);\n      } else {\n        target[key] = sourceValue;\n      }\n    } catch {}\n  }\n\n  return target;\n}\n","import isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\n\nexport default function deepEqual(\n  object1: any = [],\n  object2: any = [],\n  isErrorObject?: boolean,\n) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    if (!(isErrorObject && ['ref', 'context'].includes(key))) {\n      const val1 = object1[key];\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || isArray(val1)) && (isObject(val2) || isArray(val2))\n          ? !deepEqual(val1, val2, isErrorObject)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default function isErrorStateChanged<TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n}\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? (((fields[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\n\nexport const getPath = <T extends string, U extends object | unknown[]>(\n  path: T,\n  values: U,\n): string[] => {\n  const getInnerPath = <K>(key: K, value: U, isObject?: boolean) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(key, value, isObject(values)))\n    .flat(Infinity) as string[];\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport filterOutFalsy from './utils/filterOutFalsy';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<\n    Record<string, InternalNameSet<TFieldValues>>\n  >({});\n  const useWatchRenderFunctionsRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const defaultValuesAtRenderRef = React.useRef<\n    Partial<DefaultValues<TFieldValues>>\n  >({});\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef(\n    shouldUnregister ? {} : { ...defaultValues },\n  );\n  const resetFieldArrayFunctionRef = React.useRef<\n    Record<\n      InternalFieldName<FieldValues>,\n      (data?: UnpackNestedValue<DeepPartial<TFieldValues>>) => void\n    >\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) =>\n      !isUnMount.current &&\n      setFormState({\n        ...formStateRef.current,\n        ...state,\n      }),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state)\n      ) {\n        updateFormState({\n          ...state,\n          errors: formStateRef.current.errors,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: string,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | string[]\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = () =>\n    !deepEqual(\n      getValues(),\n      isEmptyObject(defaultValuesRef.current)\n        ? defaultValuesAtRenderRef.current\n        : defaultValuesRef.current,\n    ) || !isEmptyObject(formStateRef.current.dirtyFields);\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): {\n      dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    } => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty =\n          get(defaultValuesAtRenderRef.current, name) !==\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        if (isChanged && shouldRender) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...state,\n          };\n          updateFormState({\n            ...state,\n          });\n        }\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = (\n          await validateField<TFieldValues>(\n            fieldsRef,\n            isValidateAllFieldCriteria,\n            fieldsRef.current[name] as Field,\n            shallowFieldsStateRef,\n          )\n        )[name];\n\n        shouldRenderBaseOnError(name, error, skipReRender);\n\n        return isUndefined(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          errors: formStateRef.current.errors,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields, readFormStateRef.current.isValid);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    <T extends string, U extends object | unknown[]>(\n      name: T,\n      value: U,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig = {},\n    ) => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          fieldArrayDefaultValuesRef.current[name] = value;\n          resetFieldArrayFunctionRef.current[name]({\n            [name]: value,\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            readFormStateRef.current.isDirty ||\n            readFormStateRef.current.dirtyFields\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n              dirtyFields: formStateRef.current.dirtyFields,\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: TFieldValue extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value as TFieldValues[string], config);\n\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n    (config || {}).shouldValidate && trigger(name as any);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n\n            error = get(errors, name);\n\n            isValid = isEmptyObject(errors);\n\n            if (previousFormIsValid !== isValid) {\n              shouldRender = true;\n            }\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !data[value]) {\n          data = {\n            ...data,\n            [value]: [],\n          };\n        }\n      }\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(fieldsRef, shallowFieldsStateRef),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !filterOutFalsy(field.options || []).length) {\n          unset(defaultValuesAtRenderRef.current, field.ref.name);\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            errors: formStateRef.current.errors,\n            isDirty: isFormDirty(),\n            dirtyFields: formStateRef.current.dirtyFields,\n          });\n\n          resolverRef.current && validateResolver();\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName]\n          ? isKey(inputName)\n            ? delete formStateRef.current.errors[inputName]\n            : set(formStateRef.current.errors, inputName, undefined)\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n      errors: formStateRef.current.errors,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        shallowFieldsStateRef,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          filterOutFalsy(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...filterOutFalsy((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(validateOptions)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          if (previousFormIsValid !== isEmptyObject(error)) {\n            updateFormState();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      set(\n        defaultValuesAtRenderRef.current,\n        name,\n        isEmptyDefaultValue\n          ? isObject(fieldValue)\n            ? { ...fieldValue }\n            : fieldValue\n          : defaultValue,\n      );\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(fieldsRef, shallowFieldsStateRef, true),\n      );\n\n      if (readFormStateRef.current.isSubmitting) {\n        updateFormState({\n          isSubmitting: true,\n        });\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(fieldErrors, e));\n          shouldFocusError && focusOnErrorField(fieldsRef.current, fieldErrors);\n        }\n      } finally {\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          errors: formStateRef.current.errors,\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n\n    if (values) {\n      renderWatchedInputs('');\n    }\n\n    shallowFieldsStateRef.current = shouldUnregister ? {} : { ...values } || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n  };\n\n  observerRef.current =\n    observerRef.current || !isWeb\n      ? observerRef.current\n      : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n    resolver && readFormStateRef.current.isValid && validateResolver();\n\n    return () => {\n      isUnMount.current = true;\n      observerRef.current && observerRef.current.disconnect();\n      shallowFieldsStateRef.current = {};\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      fieldsRef.current &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = {\n    renderWatchedInputs,\n    shouldUnregister,\n    removeFieldEventListener,\n    watchInternal,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    fieldArrayDefaultValuesRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    readFormStateRef,\n    formStateRef,\n    defaultValuesRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    validateResolver: resolver ? validateResolver : undefined,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types';\nimport { ControllerProps } from './types';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formStateRef: {\n      current: { isSubmitted, touched },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const onFocusRef = React.useRef(onFocus);\n\n  const shouldValidate = (isBlurEvent?: boolean) =>\n    !skipValidation({\n      isBlurEvent,\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      isTouched: !!get(touched, name),\n      ...mode,\n    });\n\n  const commonTask = ([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (process.env.NODE_ENV !== 'production' && !name) {\n      return console.warn(\n        '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n      if (isNotFieldArray && !get(defaultValuesRef.current, name)) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  }, [rules, name, register]);\n\n  React.useEffect(\n    () => () => {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    },\n    [unregister, name, fieldArrayNamesRef],\n  );\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if ((!as && !render) || (as && render)) {\n        console.warn(\n          `📋 ${name} Controller should use either the 'as' or 'render' prop, not both. https://react-hook-form.com/api#Controller`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    if (shouldValidate(true)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    name,\n    value,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props as any)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n        name,\n      })\n    : null;\n};\n\nexport { Controller };\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M12.65 10C11.83 7.67 9.61 6 7 6c-3.31 0-6 2.69-6 6s2.69 6 6 6c2.61 0 4.83-1.67 5.65-4H17v4h4v-4h2v-4H12.65zM7 14c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z\"\n}), 'VpnKey');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\"\n}), 'Visibility');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z\"\n}), 'VisibilityOff');\n\nexports.default = _default;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Typography from '../Typography';\nimport withStyles from '../styles/withStyles';\nimport FormControlContext, { useFormControl } from '../FormControl/FormControlContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    height: '0.01em',\n    // Fix IE 11 flexbox alignment. To remove at some point.\n    maxHeight: '2em',\n    alignItems: 'center',\n    whiteSpace: 'nowrap'\n  },\n\n  /* Styles applied to the root element if `variant=\"filled\"`. */\n  filled: {\n    '&$positionStart:not($hiddenLabel)': {\n      marginTop: 16\n    }\n  },\n\n  /* Styles applied to the root element if `position=\"start\"`. */\n  positionStart: {\n    marginRight: 8\n  },\n\n  /* Styles applied to the root element if `position=\"end\"`. */\n  positionEnd: {\n    marginLeft: 8\n  },\n\n  /* Styles applied to the root element if `disablePointerEvents=true`. */\n  disablePointerEvents: {\n    pointerEvents: 'none'\n  },\n\n  /* Styles applied if the adornment is used inside <FormControl hiddenLabel />. */\n  hiddenLabel: {},\n\n  /* Styles applied if the adornment is used inside <FormControl margin=\"dense\" />. */\n  marginDense: {}\n};\nvar InputAdornment = /*#__PURE__*/React.forwardRef(function InputAdornment(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disablePointer = props.disablePointerEvents,\n      disablePointerEvents = _props$disablePointer === void 0 ? false : _props$disablePointer,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      position = props.position,\n      variantProp = props.variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"disablePointerEvents\", \"disableTypography\", \"position\", \"variant\"]);\n\n  var muiFormControl = useFormControl() || {};\n  var variant = variantProp;\n\n  if (variantProp && muiFormControl.variant) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (variantProp === muiFormControl.variant) {\n        console.error('Material-UI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');\n      }\n    }\n  }\n\n  if (muiFormControl && !variant) {\n    variant = muiFormControl.variant;\n  }\n\n  return /*#__PURE__*/React.createElement(FormControlContext.Provider, {\n    value: null\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, disablePointerEvents && classes.disablePointerEvents, muiFormControl.hiddenLabel && classes.hiddenLabel, variant === 'filled' && classes.filled, {\n      'start': classes.positionStart,\n      'end': classes.positionEnd\n    }[position], muiFormControl.margin === 'dense' && classes.marginDense),\n    ref: ref\n  }, other), typeof children === 'string' && !disableTypography ? /*#__PURE__*/React.createElement(Typography, {\n    color: \"textSecondary\"\n  }, children) : children));\n});\nprocess.env.NODE_ENV !== \"production\" ? InputAdornment.propTypes = {\n  /**\n   * The content of the component, normally an `IconButton` or string.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Disable pointer events on the root.\n   * This allows for the content of the adornment to focus the input on click.\n   */\n  disablePointerEvents: PropTypes.bool,\n\n  /**\n   * If children is a string then disable wrapping in a Typography component.\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  muiFormControl: PropTypes.object,\n\n  /**\n   * The position this adornment should appear relative to the `Input`.\n   */\n  position: PropTypes.oneOf(['start', 'end']),\n\n  /**\n   * The variant to use.\n   * Note: If you are using the `TextField` component or the `FormControl` component\n   * you do not have to set this manually.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiInputAdornment'\n})(InputAdornment);"],"sourceRoot":""}